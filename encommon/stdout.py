#==============================================================================#
# Enasis Network Common Libraries                                              #
# Python Functions                                 Logging and Standard Output #
#==============================================================================#
# Required Libraries and Configuration                                         #
# : - - - - - - - - - - - - - - - - - - -- - - - - - - - - - - - - - - - - - - #
# : Library Import and Global Variables                                        #
#------------------------------------------------------------------------------#
# Python Functions for Logging and Standard Output                             #
# : - - - - - - - - - - - - - - - - - - -- - - - - - - - - - - - - - - - - - - #
# : Logging and Standard Output                                       messages #
#==============================================================================#


#------------------------------------------------------------------------------#
# Required Libraries and Configuration                                         #
#------------------------------------------------------------------------------#
#
#~~ Library Import and Global Variables ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Import libraries that should be present in the virtual or system environment
#-----------------------------------------------------------------------------
from logging import getLogger as logging_getLogger
from logging import log as logging_log
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#------------------------------------------------------------------------------#


#------------------------------------------------------------------------------#
# Python Functions for Logging and Standard Output                             #
#------------------------------------------------------------------------------#
#
#~~ Logging and Standard Output ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Handle the standard messages generated by various procedures for the project
#-----------------------------------------------------------------------------
# message [REQUIRED] [DICTIONARY]
#   Descriptive information regarding the event which occurred during routines
#-----------------------------------------------------------------------------
# level [OPTIONAL] [STRING]
#   Level of that is relevant to the severity of the occurrence within routine
#     * debug  * info  * warn  * err  * crit
#-----------------------------------------------------------------------------
# raised [OPTIONAL] [EXCEPTION]
#   Exception variable with the context generated at the time of the exception
#-----------------------------------------------------------------------------
# Returns default boolean indicating the overall success or failure of routine
#-----------------------------------------------------------------------------
def messages(message, level="info", raised=None):
    #
    # Initial section for instantizing variables expected by remaining routine
    loggered = logging_getLogger()
    levels = {"debug": 10, "info": 20, "warn": 30, "err": 40, "crit": 50}
    argsdict = dict()
    #
    # Normalize the input parameters for simplifying the downstream procedures
    message = ['{0}="{1}"'.format(x, message[x]) for x in sorted(message)]
    if raised is not None: argsdict.update({"exc_info": raised})
    #
    # Handle standard messages generated by various procedures in the software
    logging_log(levels[level], str(" ").join(message), **argsdict)
    #
    # Returns default boolean indicating overall success or failure of routine
    return True
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#------------------------------------------------------------------------------#
